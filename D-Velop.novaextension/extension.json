{
  "identifier": "tech.staysail.ServeD",
  "name": "D-Velop",
  "organization": "Staysail Systems",
  "description": "D (dlang) language support.",
  "version": "1.0.3",
  "categories": [
    "commands",
    "completions",
    "formatters",
    "issues",
    "languages",
    "sidebars",
    "tasks"
  ],
  "repository": "https://github.com/staysail/nova-dvelop",
  "bugs": "https://github.com/staysail/nova-dvelop/issues",
  "funding": "https://github.com/sponsors/gdamore",
  "main": "main.js",
  "min_runtime": "10.0",
  "license": "MIT",

  "entitlements": {
    "process": true,
    "filesystem": "readwrite",
    "requests": true
  },

  "commands": {
    "editor": [
      {
        "title": "Jump to Definition",
        "command": "dvelop.jumpToDefinition",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Find References",
        "command": "dvelop.findReferences",
        "filters": {
          "syntaxes": ["d"]
        }
      },
      {
        "title": "Find Symbol",
        "command": "dvelop.findSymbols",
        "filters": {
          "syntaxes": ["d"]
        }
      },
      { "separator": true },
      {
        "title": "Rename Symbol",
        "command": "dvelop.renameSymbol",
        "filters": { "syntaxes": ["d"] }
      },
      { "separator": true },
      {
        "title": "Format File",
        "command": "dvelop.formatFile",
        "shortcut": "opt-shift-f",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Format Selection",
        "command": "dvelop.formatSelection",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Sort Imports",
        "command": "dvelop.sortImports",
        "filters": { "syntaxes": ["d"] }
      },
      { "separator": true },
      {
        "title": "Preferences",
        "command": "dvelop.preferences",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Extension Preferences",
        "command": "dvelop.extensionPreferences",
        "filters": { "syntaxes": ["d"] }
      },
      {
        "title": "Restart Server",
        "command": "dvelop.restartServer",
        "filters": { "syntaxes": ["d"] }
      }
    ],
    "extensions": [
      {
        "title": "Extension Preferences",
        "command": "dvelop.extensionPreferences"
      },
      {
        "title": "Check for Update",
        "command": "dvelop.checkForUpdate"
      },
      {
        "title": "Restart Server",
        "command": "dvelop.restartServer",
        "filters": { "syntaxes": ["d"] }
      }
    ]
  },
  "configWorkspace": [
    {
      "title": "Formatting",
      "type": "section",
      "children": [
        {
          "key": "dvelop.fmt.onSave",
          "title": "Format on Save",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.overrideEditorConfig",
          "title": "Override .editorconfig",
          "description": "If set, the values here override any .editorconfig file.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.braceStyle",
          "title": "Brace Style",
          "type": "enum",
          "values": [
            ["allman", "Allman"],
            ["knr", "K&R"],
            ["otbs", "One True Brace"],
            ["stroustrup", "Stroustrup"]
          ],
          "default": "allman"
        },
        {
          "key": "dvelop.fmt.softLength",
          "title": "Soft Line Length",
          "type": "number",
          "max": 1000,
          "min": 10,
          "default": 80,
          "description": "Formatter will try to keep lines less than this usually."
        },
        {
          "key": "dvelop.fmt.hardLength",
          "title": "Hard Line Length",
          "type": "number",
          "max": 1000,
          "min": 10,
          "default": 120,
          "description": "Formatter will keep lines less than this in any case."
        },
        {
          "key": "dvelop.fmt.keepBreaks",
          "title": "Preserve Line Breaks",
          "description": "Formater will preserve line breaks if possible.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.alignSwitch",
          "title": "Align Switch Statements",
          "type": "boolean",
          "description": "Align labels, cases, and defaults with their enclosing switch.",
          "default": true
        },
        {
          "key": "dvelop.fmt.compactLabeled",
          "title": "Compact Labels",
          "description": "Label on same line as associated statement.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.breakAfterOperator",
          "title": "Break After Operator",
          "description": "Prefer to break lines after the operator.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.spaceAfterCast",
          "title": "Space After Cast",
          "description": "Insert a space after a type cast.",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.fmt.spaceBeforeParameters",
          "title": "Space Before Function Parameters",
          "description": "Insert a space before the parameter list.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.selectiveImportSpace",
          "title": "Selective Import Space",
          "description": "Insert a space after the module name for selective imports.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.singleIndent",
          "title": "Single Indent Inside Parenthesis",
          "description": "Indent inside a parenthesis by one level instead of two.",
          "type": "boolean",
          "value": false
        },
        {
          "key": "dvelop.fmt.spaceBeforeAAColon",
          "title": "Old Style Associative Array Literals",
          "description": "Insert a space between the key and colon of an associative array.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.fmt.templateConstraints",
          "title": "Template Constraint Location",
          "description": "Where should template constraints be located?",
          "type": "enum",
          "values": [
            ["cond0", "Same line if possible, no indentation"],
            ["cond1", "Same line if possible, single indent otherwise"],
            ["cond2", "Same line if possible, double indent otherwise"],
            ["always0", "Next line, no indentation"],
            ["always1", "Next line, single indent"],
            ["always2", "Next line, double indent"]
          ],
          "default": "cond2"
        }
      ]
    },
    {
      "title": "Helpers",
      "type": "section",
      "children": [
        {
          "key": "dvelop.dub.path",
          "title": "Dub",
          "description": "Path to dub, if empty uses global default.",
          "type": "enum",
          "resolve": "dvelop.findDub",
          "allowCustom": true,
          "placeholder": "dub"
        },
        {
          "key": "dvelop.dub.compiler",
          "title": "Compiler",
          "type": "enum",
          "resolve": "dvelop.findCompiler",
          "description": "Path to a D compiler, if empty uses the global default.",
          "allowCustom": true,
          "placeholder": "dmd"
        },
        {
          "key": "dvelop.dub.archType",
          "title": "Architecture",
          "description": "Target architecture to build, when using DUB.",
          "type": "enum",
          "resolve": "dvelop.getArchTypes",
          "allowCustom": true,
          "default": ""
        },
        {
          "key": "dvelop.dub.buildType",
          "title": "Build Type",
          "description": "Build type, when using DUB",
          "type": "enum",
          "resolve": "dvelop.getBuildTypes",
          "default": "debug"
        },
        {
          "key": "devlop.importPaths",
          "title": "Project Import Paths",
          "type": "pathArray",
          "allowFiles": false,
          "allowFolders": true,
          "description": "Additional paths to search for imports."
        }
      ]
    },
    {
      "title": "Miscellaneous",
      "type": "section",
      "children": [
        {
          "key": "dvelop.disableServer",
          "title": "Disable Language Server",
          "description": "Prevent the use of a language server.  May improve performance, and security, but will disable functionality dependent on the language server.",
          "type": "enum",
          "values": [
            [null, "Inherit from Extension Settings"],
            [true, "Disable Serve-D"],
            [false, "Enable Serve-D"]
          ],
          "default": null
        },
        {
          "key": "dvelop.manyProjectsThreshold",
          "title": "Many Projects Threshold",
          "description": "More than this many subprojects triggers special handling.",
          "type": "number",
          "default": 4,
          "comment": "minimum value 2 because of Nova bug",
          "min": 0
        },
        {
          "key": "dvelop.manyProjectsAction",
          "title": "Action to Perform When Many Projects",
          "type": "enum",
          "values": [
            ["ask", "Ask (Prompt in Notification Center)"],
            ["skip", "Skip (Will not Index)"],
            ["load", "Load (No Confirmation)"]
          ],
          "default": "ask"
        },
        {
          "key": "dvelop.debugLsp",
          "title": "Enable LSP Debugging",
          "description": "Enable debugging of the language server.  May adversely impact performance.",
          "type": "boolean",
          "default": false
        }
      ]
    }
  ],
  "config": [
    {
      "type": "section",
      "title": "Language Server",
      "children": [
        {
          "key": "dvelop.disableServer",
          "title": "Disable Serve-D",
          "description": "Prevent the use of a language server.  May improve performance, and security, but will disable functionality dependent on the language server.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.checkForUpdates",
          "title": "Check for Updates at Start",
          "description": "When starting up, should we check to see if a new update of serve-d is available?",
          "type": "boolean",
          "default": true
        },
        {
          "key": "dvelop.allowPreRelease",
          "title": "Use Beta Releases",
          "description": "Selecting this enables beta (and release candidate) versions of serve-d to be installed.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.useCustomServer",
          "title": "Custom Serve-D Installation",
          "description": "Select this if you wish to use your own copy of serve-d.",
          "type": "boolean",
          "default": false
        },
        {
          "key": "dvelop.customServerPath",
          "title": "Serve-D Location",
          "description": "Path to serve-d, only used if using a custom installation.",
          "type": "path",
          "placeholder": "/usr/local/bin/serve-d"
        }
      ]
    },
    {
      "type": "section",
      "title": "Helpers",
      "children": [
        {
          "key": "dvelop.dub.path",
          "title": "Dub",
          "description": "Path to dub, if empty will search $PATH",
          "type": "path",
          "placeholder": "/Library/D/dmd/bin/dub"
        },
        {
          "key": "dvelop.dub.compiler",
          "title": "Compiler",
          "description": "Path to a D compiler such as dmd or ldc2, if empty will assume dmd on $PATH.",
          "type": "path",
          "placeholder": "dmd"
        }
      ]
    }
  ],
  "issueMatchers": {
    "dmd-error": {
      "pattern": {
        "regexp": "^([^:()]+)\\(([0-9]+),([0-9]+)\\): ([A-Za-z]+): (.+)$",
        "message": 5,
        "file": 1,
        "line": 2,
        "column": 3,
        "severity": 4
      }
    },
    "dmd-short-error": {
      "pattern": {
        "regexp": "^([^:()]+)\\(([0-9]+)\\): ([A-Za-z]+): (.+)$",
        "message": 4,
        "file": 1,
        "line": 2,
        "severity": 3
      }
    },
    "d-exception-error": {
      "pattern": {
        "regexp": "^[^@]+@([^:()]+)\\(([0-9]+)\\): (.+)$",
        "file": 1,
        "line": 2,
        "message": 3,
        "severity": "error"
      }
    }
  },
  "sidebars": [
    {
      "id": "dvelop.sidebar",
      "name": "D-Velop",
      "smallImage": "d-mono-small",
      "largeImage": "d-mono-large",
      "sections": [
        {
          "id": "dvelop.sidebar.info",
          "name": "Information",
          "headerCommands": [
            {
              "title": "Restart",
              "command": "dvelop.restartServer",
              "tooltip": "Restart language server",
              "image": "__builtin.refresh"
            }
          ]
        },
        {
          "id": "dvelop.sidebar.references",
          "name": "References",
          "placeholderText": "Results from \"Find References\" appear here.",
          "placeholderImage": "d-mono-large",
          "headerCommands": [
            {
              "title": "Find References",
              "command": "dvelop.findReferences",
              "tooltip": "Find references to the selected symbol",
              "image": "search"
            }
          ]
        },
        {
          "id": "dvelop.sidebar.symbols",
          "name": "Symbols",
          "placeholderText": "Results from \"Find Symbols\" appear here.",
          "placeholderImage": "d-mono-large",
          "headerCommands": [
            {
              "title": "Find Symbol",
              "command": "dvelop.findSymbols",
              "tooltip": "Open the Find Symbol dialog",
              "image": "search"
            }
          ]
        }
      ]
    }
  ],
  "activationEvents": ["onLanguage:d"]
}
